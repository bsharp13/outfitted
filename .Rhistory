#scale_x_log10() +
#scale_y_log10(labels = comma) +
scale_color_manual(values = c('#1BC1BF', '#6CD328', '#2B214F', '#1B5BC1')) +
labs(x = 'RC Score', y = 'Revenue (Millions)', title = 'Segmentation') +
theme_bw()
clear_connections()
rm(list = ls())
library(tidyverse)
library(magrittr)
library(RMySQL)
library(lubridate)
library(googlesheets)
library(QGTM)
setwd(paste0(
'/Volumes/GoogleDrive/My Drive/Sales Ops',
'/4-GTM Strategy and Sales Performance/Tableau Workbooks'
))
# Data refreshes
#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------
# Creates file path assuming proper naming convention is used
make_path <- function(project) {
paste0(project, '/', project, '.R')
}
# Create SalesAttainment
source('CreateAttainment.R')
# Create TerritorySummary
source('CreateTerritorySummary.R')
#-------------------------------------------------------------------------------
# Daily
#-------------------------------------------------------------------------------
# Kenexa Report for Jordan Katz
# source(make_path('KenexaOpps'))
# Discount optimization
source(make_path('DiscountOptimization'))
# Invoice opp mapping
source(make_path('InvoiceOppMapping'))
# Competition report updates
source(make_path('QClub19'))
source(make_path('HQO'))
source(make_path('EXPipeline'))
#-------------------------------------------------------------------------------
# MWF
#-------------------------------------------------------------------------------
if (weekdays(today()) %in% c('Monday', 'Wednesday', 'Friday')) {
# Utilization dashboard data updates
source(make_path('UtilizationEMEA'))
source(make_path('UtilizationNA'))
}
#-------------------------------------------------------------------------------
# Weekly
#-------------------------------------------------------------------------------
if (weekdays(today()) == 'Monday') {
}
clear_connections()
rm(list = ls())
library(magrittr)
library(tidyverse)
library(RMySQL)
library(QGTM)
source('~/Documents/Source/DatamartCredentials.R')
conn <- datamart_connect(username, password)
pipe <- dbSendQuery(
conn,
"SELECT
O.AccountUltimateParentAccountID AS UltimateParentAccountID
,O.AccountUltimateParentAccountName AS UltimateParentAccountName
,O.AccountID AS SFDC_AccountID
,O.AccountName AS AccountName
,A.DunsNumber AS Acct_DUNS
,UP.DunsNumber AS Ult_Parent_DUNS
,O.AccountType AS AccountType
,O.AccountIndustry AS AccountIndustry
,A.NaicsCode2DigitDescription AS AccountSubindustry
,A.BillingAddressStreet AS Acct_Street
,A.BillingCity AS Acct_City
,A.BillingState AS Acct_State
,A.BillingCountry AS Acct_Country
,A.BillingPostalCode AS Acct_Postal_Code
,A.GlobalRegion AS Acct_Global_Region
,UP.GlobalRegion AS UltimateParentGlobalRegion
,A.AccountRevenue AS Acct_Revenue_M
,CONCAT(YEAR(CloseDate), ' Q', QUARTER(CloseDate)) AS Close_Quarter
,COALESCE(RCAmount, 0) + COALESCE(EXAmount, 0) + COALESCE(CXAmount, 0) AS ACV_K_USD
FROM
SalesProd.Opportunity O
LEFT JOIN Production.Account A ON O.AccountID = A.AccountID
LEFT JOIN Production.Account UP ON O.AccountUltimateParentAccountID = UP.AccountID
WHERE
ForecastCategoryName IN ('Won', 'Commit', 'Best Case', 'Pipeline')
AND YEAR(CloseDate) = 2019
AND RCAmount + EXAmount + CXAmount > 0;"
) %>% fetch(n = -1)
sapid <- read_csv('~/Desktop/SAPID.csv')
pipe %<>% left_join(sapid, by = c('AccountID' = 'Id'))
pipe %<>% left_join(sapid, by = c('SFDC_AccountID' = 'Id'))
View(pipe)
write.csv(pipe, 'QualtricsPipe19_19-04-29.csv', row.names = FALSE)
write.csv(pipe, '~/Desktop/QualtricsPipe19_19-04-29.csv', row.names = FALSE)
clear_connections()
rm(list = ls())
library(tidyverse)
library(RMySQL)
library(QGTM)
source('~/Documents/Source/DatamartCredentials.R')
conn <- datamart_connect(username, password)
dbGetQuery(conn, 'SET NAMES UTF8')
# User to Team
user <- dbSendQuery(
conn,
"SELECT
U.Name AS Rep
,U.Rep_Tier__c AS RepTier
,U.Sales_Team__c AS SalesTeam
,L.TeamLead
,L.TeamLeadEmail
,L.TeamLeadTier
FROM
SFDC.User U
LEFT JOIN
(
SELECT
Name AS TeamLead
,Email AS TeamLeadEmail
,Rep_Tier__c AS TeamLeadTier
,Sales_Team__c
FROM
SFDC.User
WHERE
Rep_Tier__c  IN ('STL', 'TL', 'ESTL', 'PTL', 'RL', 'RD')
OR Sales_Team__c LIKE CONCAT('%', Name, '%')
) L
ON U.Sales_Team__c = L.Sales_Team__c
WHERE
U.IsActive = 1
AND U.Sales_Team__c IS NOT NULL
AND U.Sales_Team__c NOT IN ('Non-sales', 'Senior Leadership', 'Research Services Operations - Joel Huntington')
AND U.Sales_Team__c NOT LIKE '%Client Success%'
AND L.TeamLead NOT LIKE '%Ben Graetz%'
AND (
Rep_Tier__c LIKE 'AE%'
OR Rep_Tier__c LIKE 'ES%'
OR Rep_Tier__c LIKE 'PR%'
OR Rep_Tier__c LIKE 'PES%'
OR Rep_Tier__c IN ('TL', 'RL', 'RD', 'SRL', 'STL')
);"
) %>% fetch(n = -1)
lead <- user %>%
select(TeamLead, TeamLeadEmail, Rep, RepTier) %>%
filter(TeamLead != Rep) %>%
mutate(Rep = paste0(Rep, ', ', RepTier)) %>%
select(-RepTier) %>%
group_by(TeamLead) %>%
arrange(TeamLead, Rep) %>%
mutate(RepNumber = paste0('Rep', str_pad(row_number(), 2, 'left', '0'))) %>%
spread(RepNumber, Rep, fill = '')
write.csv(lead, '~/Desktop/UserToTeam.csv', row.names = FALSE)
# Team to Region
team <- dbSendQuery(
conn,
"SELECT
t.Name AS Team
,t.Region__c
,r.Name AS Region
FROM
SFDC.Team__c t
LEFT JOIN SFDC.Region__c r ON t.Region__c = r.Id
WHERE
t.Active__c = 1
AND t.Name NOT LIKE '%Client Success%'
AND t.Name NOT LIKE '%OpDev%'
AND t.Name NOT LIKE '%SDR%'
AND t.Name NOT LIKE '%Operations%'
AND t.Name NOT LIKE '%Manage%'
;"
) %>% fetch(n = -1)
email <- dbSendQuery(conn, "SELECT Name, Email FROM SFDC.User") %>%
fetch(n = -1)
test <- team %>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
conn <- datamart_connect(username, password)
email <- dbSendQuery(conn, "SELECT Name, Email FROM SFDC.User") %>%
fetch(n = -1)
test <- team %>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
View(test)
team %<>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
write.csv(team, '~/Desktop/TeamToRegion.csv', row.names = FALSE)
View(team)
team %>% count(Email)
team %>% count(Email) %>% View()
team %>% count(Email) %>% View()
conn <- datamart_connect(username, password)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
;"
) %>% fetch(n = -1)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
;"
) %>% fetch(n = -1)
View(team)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT LIKE '%Professional Services%'
;"
) %>% fetch(n = -1)
View(team)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME')
;"
) %>% fetch(n = -1)
View(team)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
View(team)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam
,CurrentRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
View(team)
team %<>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam AS Team
,CurrentRegion AS Region
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
email <- dbSendQuery(conn, "SELECT Name, Email FROM SFDC.User") %>%
fetch(n = -1)
team %<>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
View(team)
region_lead <- team %>%
select(-RegionName, -Region) %>%
group_by(Region) %>%
arrange(Region, Team) %>%
mutate(TeamNumber = paste0('Team', str_pad(row_number(), 2, 'left', '0'))) %>%
spread(TeamNumber, Team, fill = '')
region_lead <- team %>%
select(-RegionName, -Region) %>%
group_by(RegionLead) %>%
arrange(RegionLead, Team) %>%
mutate(TeamNumber = paste0('Team', str_pad(row_number(), 2, 'left', '0'))) %>%
spread(TeamNumber, Team, fill = '')
View(region_lead)
write.csv(team, '~/Desktop/TeamToRegion.csv', row.names = FALSE)
# Region to Senior Region
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentRegion AS Region
,CurrentSeniorRegion AS SeniorRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
team <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentTeam AS Team
,CurrentRegion AS Region
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
email <- dbSendQuery(conn, "SELECT Name, Email FROM SFDC.User") %>%
fetch(n = -1)
team %<>%
semi_join(user, by = c('Team' = 'SalesTeam')) %>%
separate(
col = Region,
into = c('RegionName', 'RegionLead'),
sep = ' - ',
remove = FALSE
) %>%
left_join(email, by = c('RegionLead' = 'Name'))
region_lead <- team %>%
select(-RegionName, -Region) %>%
group_by(RegionLead) %>%
arrange(RegionLead, Team) %>%
mutate(TeamNumber = paste0('Team', str_pad(row_number(), 2, 'left', '0'))) %>%
spread(TeamNumber, Team, fill = '')
# Region to Senior Region
region <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentRegion AS Region
,CurrentSeniorRegion AS SeniorRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
View(region)
# Region to Senior Region
region <- dbSendQuery(
conn,
"SELECT
DISTINCT CurrentRegion AS Region
,CurrentSeniorRegion AS SeniorRegion
FROM DataTeam.DTT_UserHistory
WHERE
IsActiveUserHistoryRecord = 1
AND SalesStartDate IS NOT NULL
AND CurrentSeniorRegion IS NOT NULL
AND CurrentTeam NOT LIKE '%Client Success%'
AND CurrentTeam NOT LIKE '%OpDev%'
AND CurrentTeam NOT LIKE '%SDR%'
AND CurrentTeam NOT LIKE '%Operations%'
AND CurrentTeam NOT LIKE '%Manage%'
AND CurrentTeam NOT IN ('Professional Services', 'Finance', 'SME', 'Partnerships')
;"
) %>% fetch(n = -1)
View(region)
library(tidyverse)
library(magrittr)
library(RMySQL)
library(lubridate)
library(googlesheets)
library(QGTM)
setwd(paste0(
'/Volumes/GoogleDrive/My Drive/Sales Ops',
'/4-GTM Strategy and Sales Performance/Tableau Workbooks'
))
# Data refreshes
#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------
# Creates file path assuming proper naming convention is used
make_path <- function(project) {
paste0(project, '/', project, '.R')
}
source('CreateAccountOwnerHistory.R')
#-------------------------------------------------------------------------------
# Daily
#-------------------------------------------------------------------------------
# Kenexa Report for Jordan Katz
# source(make_path('KenexaOpps'))
# Discount optimization
source(make_path('DiscountOptimization'))
# Competition report updates
source(make_path('QClub19'))
source(make_path('HQO'))
source(make_path('EXPipeline'))
#-------------------------------------------------------------------------------
# MWF
#-------------------------------------------------------------------------------
if (weekdays(today()) %in% c('Monday', 'Wednesday', 'Friday')) {
# Utilization dashboard data updates
source(make_path('UtilizationEMEA'))
source(make_path('UtilizationNA'))
}
#-------------------------------------------------------------------------------
# Weekly
#-------------------------------------------------------------------------------
if (weekdays(today()) == 'Monday') {
}
clear_connections()
rm(list = ls())
log('1')
mpg
install.packages('ggdark')
pants <- tibble('Pants', 'Length', 'Color', 'LastWorn')
QGTM::set_directory()
setwd('~/Documents/Personal/outfitted')
ls
write.csv(pants, 'Pants.csv', row.names = FALSE)
